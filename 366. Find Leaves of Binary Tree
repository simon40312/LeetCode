/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> findLeaves(TreeNode* root) {
        vector<vector<int>> ans;
        vector<int> tempAns;
        if ( root == NULL )
            return {};
        while ( !IsLeaf(root) ){
            FindLeaf( root,tempAns );
            ans.push_back(tempAns);
            tempAns.clear();
        }
        ans.push_back({root->val});
        return ans;
    }
    void FindLeaf( TreeNode* root, vector<int> &tempAns ){
        if ( !root )
            return;
        if ( IsLeaf(root->right) ){
            tempAns.push_back(root->right->val);
            root->right = NULL;
        }
        else
            FindLeaf( root->right, tempAns );
        
        if ( IsLeaf(root->left) ){
            tempAns.push_back(root->left->val);
            root->left = NULL;
        }
        else
            FindLeaf( root->left, tempAns );
    }
    
    bool IsLeaf( TreeNode* root ){
        if ( !root )
            return false;
        if( !root->left && !root->right )
            return true;
        else
            return false;
    }
};
