class Solution {
public:
    int FindInNormal( vector<int>& nums, int l, int r, int target ){
        cout << "l " << l << " r " << r <<endl;
        if ( target > nums[r] || target < nums[l] )
            return -1;
        while ( l <= r ){
            
            if ( nums[l] == target ){
                return l;
            }
            else if ( l == r ){
                return -1;
            }
            else {
                if ( nums[(l+r)/2] >= target )
                    r = (l+r)/2;
                else 
                    l = (l+r)/2+1;
            }
            
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int left = 0, right = nums.size()-1,mid;
        if ( !right ) {
            if ( target == nums[0] )
                return 0;
            else 
                return -1;
        }
        if ( nums[0] < nums[right] )
            return FindInNormal( nums,left,right,target );
        
        while ( left <= right ){
            mid = left + ( right - left) / 2;
            if ( nums[mid] > nums[mid+1]  ){
                if ( target <= nums[mid] && target >= nums[0] )
                    return FindInNormal(nums,0,mid,target);
                else
                    return FindInNormal(nums,mid+1,nums.size()-1,target);
            }
            if ( nums[mid] < nums[mid-1] ) {
                if ( target >= nums[mid] && target <= nums[nums.size()-1] )
                    return FindInNormal(nums,mid,nums.size()-1,target);
                else
                    return FindInNormal(nums,0,mid-1,target);
            }
            if ( nums[mid] > nums[left] ){
                left = mid+1;
            }
            else{
                right = mid;
            }
        }
        return -1;
    }
};
